;; -*- mode: emacs-lisp -*-
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu 0.1)
 '(ac-auto-start nil)
 '(ac-delay 0.1)
 '(ac-max-width 0.5)
 '(ac-menu-height 15)
 '(ac-quick-help-delay 0.1)
 '(ac-quick-help-height 10)
 '(ac-quick-help-prefer-pos-tip nil)
 '(ac-trigger-commands-on-completing
   (quote
    (delete-backward-char backward-delete-char backward-delete-char-untabify autopair-backspace paredit-backward-delete paredit-backward-delete-word self-insert-command)))
 '(ac-trigger-key "M-.")
 '(ac-use-comphist nil)
 '(ac-use-menu-map t)
 '(add-log-mailing-address nil)
 '(auto-revert-interval 0.5)
 '(auto-save-default nil)
 '(c-basic-offset 2)
 '(column-enforce-column 100)
 '(compilation-auto-jump-to-first-error nil)
 '(compilation-context-lines 0)
 '(compilation-scroll-output t)
 '(confirm-kill-emacs nil)
 '(create-lockfiles nil)
 '(fill-column 84)
 '(flycheck-checkers
   (quote
    (ada-gnat asciidoctor asciidoc c/c++-clang c/c++-gcc c/c++-cppcheck cfengine chef-foodcritic coffee coffee-coffeelint coq css-csslint css-stylelint cuda-nvcc cwl d-dmd dockerfile-hadolint emacs-lisp emacs-lisp-checkdoc erlang-rebar3 erlang eruby-erubis fortran-gfortran groovy haml handlebars haskell-stack-ghc haskell-ghc haskell-hlint html-tidy javascript-eslint javascript-jshint javascript-standard json-jsonlint json-python-json json-jq jsonnet less less-stylelint llvm-llc lua-luacheck lua markdown-markdownlint-cli markdown-mdl nix nix-linter opam perl perl-perlcritic php php-phpmd php-phpcs processing proselint protobuf-protoc protobuf-prototool pug puppet-parser puppet-lint python-flake8 python-pylint python-pycompile python-mypy r-lintr racket rpm-rpmlint rst-sphinx rst ruby-rubocop ruby-reek ruby-rubylint ruby ruby-jruby rust-cargo rust rust-clippy scala scala-scalastyle scheme-chicken scss-lint scss-stylelint sass/scss-sass-lint sass scss sh-bash sh-posix-dash sh-posix-bash sh-zsh sh-shellcheck slim slim-lint sql-sqlint systemd-analyze tcl-nagelfar terraform terraform-tflint tex-chktex tex-lacheck texinfo textlint typescript-tslint verilog-verilator vhdl-ghdl xml-xmlstarlet xml-xmllint yaml-jsyaml yaml-ruby)))
 '(flycheck-python-pycompile-executable "python3")
 '(flycheck-python-pylint-executable "python3")
 '(flycheck-shellcheck-excluded-warnings (quote ("SC2086" "SC2155")))
 '(flyspell-duplicate-distance 0)
 '(flyspell-issue-message-flag nil)
 '(flyspell-issue-welcome-flag nil)
 '(flyspell-large-region 2000)
 '(flyspell-use-meta-tab t)
 '(fringe-mode (quote (nil . 0)) nil (fringe))
 '(global-auto-complete-mode nil)
 '(global-auto-revert-mode t)
 '(global-rudel-header-subscriptions-mode t)
 '(global-rudel-minor-mode t)
 '(gud-gdb-command-name "/ke/local/toolchain3-x86_64-nptl/tools/bin/gdb -i=mi")
 '(ido-create-new-buffer (quote always))
 '(ido-default-buffer-method (quote selected-window))
 '(ido-enable-last-directory-history nil)
 '(ido-ignore-buffers (quote ("^[*]" "\\` ")))
 '(ido-mode (quote buffer) nil (ido))
 '(imenu-use-popup-menu t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(initial-buffer-choice nil)
 '(initial-major-mode (quote fundamental-mode))
 '(jedi:environment-root nil)
 '(jedi:install-python-jedi-dev-command
   (quote
    ("pip3" "install" "--upgrade" "git+https://github.com/davidhalter/jedi.git@master#egg=jedi")))
 '(jedi:server-command
   (quote
    ("python3" "/home/psyco/.emacs.d/.python-environments/default/bin/jediepcserver")))
 '(js-indent-level 2)
 '(js2-basic-offset 2)
 '(js2-highlight-level 1)
 '(linum-format (quote dynamic))
 '(lsp-enable-symbol-highlighting nil)
 '(lsp-file-watch-ignored
   (quote
    ("[/\\\\]\\.git$" "[/\\\\]\\.hg$" "[/\\\\]\\.bzr$" "[/\\\\]_darcs$" "[/\\\\]\\.svn$" "[/\\\\]_FOSSIL_$" "[/\\\\]\\.idea$" "[/\\\\]\\.ensime_cache$" "[/\\\\]\\.eunit$" "[/\\\\]node_modules$" "[/\\\\]\\.fslckout$" "[/\\\\]\\.tox$" "[/\\\\]\\.stack-work$" "[/\\\\]\\.bloop$" "[/\\\\]\\.metals$" "[/\\\\]target$" "[/\\\\]\\.ccls-cache$" "[/\\\\]\\.deps$" "[/\\\\]build-aux$" "[/\\\\]autom4te.cache$" "[/\\\\]\\.reference$" ".*/vendor/.*")))
 '(lsp-ui-doc-delay 0)
 '(lsp-ui-doc-enable nil)
 '(lsp-ui-doc-header t)
 '(lsp-ui-imenu-kind-position (quote left))
 '(message-log-max t)
 '(mode-line-format
   (quote
    ("%&%&%& "
     (:propertize "%b " face mode-line-buffer-id)
     "- (%l:%c) - %p - "
     (:eval
      (if
          (buffer-file-name)
          (file-name-directory
           (buffer-file-name))
        "[not a real file]"))
     " %-")))
 '(package-selected-packages
   (quote
    (flycheck lsp-ui use-package company lsp-mode yaml-path xtdmacs terraform-mode paas-manifest-helper)))
 '(php-mode-dollar-property-warning t)
 '(php-mode-dot-property-warning t)
 '(pop-up-windows t)
 '(python-check-command "python3 -m pylint")
 '(python-continuation-offset 2)
 '(python-indent 2)
 '(python-indent-guess-indent-offset nil)
 '(python-indent-offset 2)
 '(python-shell-interpreter "python3")
 '(rcirc-server-alist
   (quote
    (("floobits.com" :nick "psycofdj" :port 6697 :user-name "psycofdj" :password "7q15flet083q9fqp79b4fw945" :channels
      ("#ArthurHlt/terraform-provider-concourse")
      :encryption tls))))
 '(require-final-newline (quote ask))
 '(rtags-local-references-enabled t)
 '(rtags-tracking t)
 '(safe-local-variable-values
   (quote
    ((eval setq xtdmacs-code-python-test-bin-path
           (concat
            (file-name-directory
             (let
                 ((d
                   (dir-locals-find-file ".")))
               (if
                   (stringp d)
                   d
                 (car d))))
            "devtools/unittests.py"))
     (xtdmacs-code-cpp-indent-load-autodsadsa)
     (xtdmacs-code-cpp-indent-load-auto . t)
     (xtdmacs-code-cpp-indent-save-auto . t)
     (xtdmacs-code-cpp-indent-save-auto)
     (xtdmacs-code-cpp-indent-load-auto)
     (xtdmacs-code-cpp-indent-save-auto . f)
     (xtdmacs-code-cpp-indent-load-auto . f)
     (sh-indent-comment . t)
     (sh-basic-offset . 4))))
 '(scroll-bar-mode nil)
 '(sh-basic-offset 2)
 '(show-trailing-whitespace t)
 '(speedbar-tag-regroup-maximum-length 10000)
 '(split-height-threshold nil)
 '(split-width-threshold nil)
 '(swbuff-exclude-buffer-regexps
   (quote
    ("^ " "*Help*" "*scratch*" "*Messages*" "*compilation*" "*shell*" "*Completions*" "*Buffer List*")))
 '(tab-width 2)
 '(transient-mark-mode nil)
 '(truncate-lines t)
 '(truncate-partial-width-windows t)
 '(undo-limit 80000)
 '(user-full-name "Xavier MARCELET")
 '(user-mail-address "xavier@marcelet.com")
 '(vc-handled-backends nil)
 '(web-mode-code-indent-offset 2)
 '(web-mode-comment-style 2)
 '(web-mode-css-indent-offset 2)
 '(web-mode-enable-auto-indentation t)
 '(web-mode-enable-auto-pairing t)
 '(web-mode-enable-block-face t)
 '(web-mode-enable-css-colorization t)
 '(web-mode-enable-current-element-highlight nil)
 '(web-mode-enable-indent-cycle nil)
 '(web-mode-enable-whitespaces nil)
 '(web-mode-markup-indent-offset 2)
 '(xtdmacs-bindings-mode t)
 '(xtdmacs-code-go-indent-load-auto t)
 '(xtdmacs-code-go-indent-save-auto t)
 '(xtdmacs-code-python-default-compile-env "")
 '(xtdmacs-code-python-default-deploy-bin (lambda nil "make doc"))
 '(xtdmacs-code-python-pylint-args (quote xtdmacs-code-python-pylint-getargs))
 '(xtdmacs-code-python-pylint-bin-path "python3 -m pylint")
 '(xtdmacs-code-spell-ignore-regexp
   (quote
    ("@subsubsection [^ ]+" "@image html [^ ]+" "@subsection [^ ]+" "@param [^ ]+" "@section [^ ]+" "//  LocalWords: *" "@ref [^ ]+" "[^ ]+\\.[^ ]+")))
 '(xtdmacs-loader-auto-major-mode-alist
   (quote
    ((("Dockerfile")
      dockerfile-mode)
     (("\\.php\\'")
      php-mode)
     (("\\.ytpl\\'" "spec")
      yaml-mode)
     (("\\.xml\\.erb\\'" "\\.erb\\'" "Rakefile\\'")
      ruby-mode)
     (("\\.html\\'" "\\.tpl\\'")
      web-mode)
     (("\\.py\\'")
      python-mode)
     (("\\.h\\'" "\\.c\\'" "\\.cc\\'" "\\.hh\\'" "\\.cpp\\'" "\\.hpp\\'" "\\.hxx\\'")
      c++-mode)
     (("\\.js\\'")
      js2-mode)
     (("\\.json\\'")
      json-mode)
     (("CMakeLists\\.txt\\'")
      cmake-mode)
     (("\\.groovy\\'")
      groovy-mode)
     (("Makefile")
      makefile-mode)
     (("\\.el\\'")
      emacs-lisp-mode)
     (("\\.java\\'")
      java-mode))))
 '(xtdmacs-loader-auto-minor-mode-alist
   (quote
    ((("Dockerfile")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode)
     (("\\.php\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-line-mode xtdmacs-code-php-mode)
     (("\\.xml\\.erb\\'" "\\.erb\\'" "Rakefile\\'")
      xtdmacs-code-mode)
     (("\\.html\\'" "\\.tpl\\'" "\\.xml\\'" "\\.xsl\\'")
      xtdmacs-code-mode xtdmacs-code-web-mode)
     (("\\.py\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-python-mode xtdmacs-code-line-mode)
     (("\\.h\\'" "\\.c\\'" "\\.cc\\'" "\\.hh\\'" "\\.cpp\\'" "\\.hpp\\'" "\\.hxx\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-cpp-mode xtdmacs-code-line-mode)
     (("\\.js\\'")
      xtdmacs-code-mode xtdmacs-code-js-mode xtdmacs-code-line-mode xtdmacs-code-spell-prog-mode)
     (("\\.json\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-json-mode)
     (("CMakeLists\\.txt\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode linum-mode)
     (("\\.groovy\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode)
     (("Makefile")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-makefile-mode xtdmacs-code-line-mode)
     (("\\.el\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-lisp-mode xtdmacs-code-line-mode)
     (("\\.java\\'" "\\.bsh\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-java-mode xtdmacs-code-line-mode)
     (("\\.md\\'")
      xtdmacs-code-mode xtdmacs-code-spell-mode)
     (("\\.rst\\'")
      xtdmacs-code-mode xtdmacs-code-spell-mode xtdmacs-code-sphinx-mode xtdmacs-code-line-mode)
     (("\\.go\\'")
      xtdmacs-code-mode xtdmacs-code-spell-prog-mode xtdmacs-code-line-mode xtdmacs-code-go-mode)
     (("\\.tf\\'")
      xtdmacs-code-mode)
     (("\\.yml" "\\.yaml" "\\.ytpl" "spec")
      xtdmacs-code-mode xtdmacs-code-line-mode xtdmacs-code-yaml-mode)))))


;; ----------------------------------------------------------
;; - Personalisation des couleurs                           -
;; - ! ATTENTION !  le terminal doit etre en 256 couleurs   -
;; - Ajouter "export TERM=xterm-256color" dans le ~/.bashrc -
;; - la fonction "list-colors-display" affiche la liste des -
;; - couleurs disponibles dans emacs                        -
;; ----------------------------------------------------------
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "unspecified-bg" :foreground "unspecified-fg" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 1 :width normal :foundry "default" :family "default"))))
 '(column-enforce-face ((t (:background "color-235"))))
 '(company-scrollbar-bg ((t (:background "color-241"))))
 '(company-scrollbar-fg ((t (:background "color-237"))))
 '(company-tooltip ((t (:background "color-235"))))
 '(company-tooltip-annotation ((t (:foreground "color-105"))))
 '(company-tooltip-common ((t (:foreground "color-105" :underline t))))
 '(company-tooltip-selection ((t (:background "color-233"))))
 '(custom-variable-tag ((((min-colors 256) (background dark)) (:foreground "#ff00ff" :weight bold)) (((background light)) (:foreground "#blue1" :weight bold))))
 '(ediff-current-diff-A ((t (:background "color-52"))))
 '(ediff-current-diff-B ((t (:background "color-52"))))
 '(ediff-current-diff-C ((t (:background "color-52"))))
 '(ediff-even-diff-A ((t (:background "color-234"))))
 '(ediff-even-diff-Ancestor ((t (:background "color-60"))))
 '(ediff-even-diff-B ((t (:background "color-234"))))
 '(ediff-even-diff-C ((t (:background "color-239"))))
 '(ediff-fine-diff-A ((t (:background "color-93"))))
 '(ediff-fine-diff-B ((t (:background "color-93"))))
 '(ediff-odd-diff-A ((t (:background "color-234"))))
 '(ediff-odd-diff-Ancestor ((t (:background "color-58"))))
 '(ediff-odd-diff-B ((t (:background "color-234"))))
 '(ediff-odd-diff-C ((t (:background "color-234"))))
 '(flycheck-error ((t (:foreground "color-196" :weight bold))))
 '(flyspell-duplicate ((((min-colors 256) (background dark)) (:background "#d7af00")) (((min-colors 256) (background light)) (:inherit warning :underline (:color foreground-color :style line)))))
 '(flyspell-incorrect ((t (:underline (:color "red" :style wave)))))
 '(font-lock-builtin-face ((t (:inherit font-lock-keyword-face))))
 '(font-lock-comment-face ((t (:foreground "color-160"))))
 '(font-lock-constant-face ((((min-colors 256) (background dark)) (:foreground "#cd00cd")) (((min-colors 256) (background light)) (:foreground "#008b8b"))))
 '(font-lock-function-name-face ((((min-colors 256) (background dark)) (:foreground "#5c5cff")) (((min-colors 256) (background light)) (:foreground "#0000ff"))))
 '(font-lock-keyword-face ((((min-colors 256) (background dark)) (:foreground "#00ffff" :weight bold)) (((min-colors 256) (background light)) (:foreground "#a020f0" :weight bold))))
 '(font-lock-preprocessor-face ((((min-colors 256) (background dark)) (:inherit font-lock-builtin-face :foreground "#005fd7" :weight bold)) (((background light)) (:inherit font-lock-builtin-face))))
 '(font-lock-string-face ((((min-colors 256) (background dark)) (:foreground "#00af00")) (((min-colors 256) (background light)) (:foreground "#8b2252"))))
 '(font-lock-type-face ((((min-colors 256) (background dark)) (:foreground "#00af00")) (((min-colors 256) (background light)) (:foreground "#228b22"))))
 '(font-lock-variable-name-face ((((min-colors 256) (background dark)) (:foreground "#87afff")) (((min-colors 256) (background light)) (:foreground "#a0522d"))))
 '(header-line ((t (:inherit mode-line-inactive))))
 '(js2-external-variable-face ((t (:inherit face-global-variable))))
 '(link ((((min-colors 256) (background dark)) (:foreground "#875fff" :underline t :weight bold)) (((min-colors 256) (background light)) (:foreground "#3a5fcd" :underline (:color foreground-color :style line)))))
 '(linum ((t (:inherit mode-line-inactive))))
 '(menu ((t (:inherit mode-line-inactive))))
 '(minibuffer-prompt ((((min-colors 256) (background dark)) (:foreground "#875fff" :weight bold)) (((min-colors 256) (background light)) (:foreground "#0000cd" :weight bold))))
 '(mode-line ((((min-colors 256) (background dark)) (:background "#303030" :foreground "#af5f00")) (((min-colors 256) (background light)) (:background "#bfbfbf" :foreground "#000000" :box (:line-width -1 :style (quote released-button))))))
 '(mode-line-buffer-id ((t (:foreground "red" :weight bold))))
 '(mode-line-emphasis ((t (:weight bold))))
 '(mode-line-inactive ((((min-colors 256) (background dark)) (:inherit mode-line :background "#1c1c1c")) (((min-colors 256) (background light)) (:inherit mode-line :background "#e5e5e5" :foreground "#333333" :weight normal :box (:line-width -1 :color "#bfbfbf" :style nil)))))
 '(region ((((min-colors 256) (background light)) (:background "#dcdcdc")) (((min-colors 256) (background dark)) (:background "#121212"))))
 '(rudel-author-overlay-face ((t (:underline t))))
 '(speedbar-directory-face ((((min-colors 256) (background dark)) (:foreground "#ffff00")) (((min-colors 256) (background light)) (:foreground "#00008b"))))
 '(web-mode-block-control-face ((((min-colors 256) (background dark)) (:foreground "#af5fff")) (((min-colors 256) (background light)) (:inherit font-lock-processor-face))))
 '(web-mode-block-delimiter-face ((((min-colors 256) (background dark)) (:foreground "#af5fff")) (((min-colors 256) (background light)) (:inherit font-lock-processor-face))))
 '(web-mode-current-element-highlight-face ((((min-colors 256) (background dark)) (:background "#262626")) (((min-colors 256) (background light)) (:background "#000000"))))
 '(web-mode-html-attr-name-face ((((min-colors 256) (background dark)) (:foreground "#af5f00")) (((min-colors 256) (background light)) (:foreground "#212121"))))
 '(web-mode-html-tag-bracket-face ((((min-colors 256) (background dark)) (:foreground "#0087ff")) (((min-colors 256) (background light)) (:foreground "#242424"))))
 '(web-mode-html-tag-face ((((min-colors 256) (background dark)) (:foreground "#0087ff")) (((min-colors 256) (background light)) (:foreground "#262626"))))
 '(which-func ((t (:foreground "color-62"))))
 '(widget-field ((((min-colors 256) (background dark)) (:background "#121212")) (((min-colors 256) (background light)) (:background "#d9d9d9"))))
 '(widget-inactive ((((min-colors 256) (background dark)) (:background "#000000")) (((min-colors 256) (background light)) (:inherit shadow))))
 '(xtdmacs-code-doxymacs-h1-face ((t (:foreground "brightred" :underline t :weight bold))))
 '(xtdmacs-code-doxymacs-h2-face ((t (:foreground "color-196" :underline t))))
 '(xtdmacs-code-doxymacs-h3-face ((t (:foreground "color-24" :underline t :weight bold))))
 '(xtdmacs-code-doxymacs-h4-face ((t (:foreground "color-24"))))
 '(xtdmacs-code-doxymacs-keyword-face ((t (:foreground "color-103"))))
 '(xtdmacs-code-doxymacs-parameter-face ((t (:inherit font-lock-string-face :foreground "color-69"))))
 '(xtdmacs-code-doxymacs-variable-face ((t (:inherit xtdmacs-code-face-param))))
 '(xtdmacs-code-go-face-indent-error ((t (:foreground "color-124" :underline t))))
 '(xtdmacs-compile++-compiling ((t (:background "color-22"))))
 '(xtdmacs-compile++-error-face ((t (:background "color-52")))))
